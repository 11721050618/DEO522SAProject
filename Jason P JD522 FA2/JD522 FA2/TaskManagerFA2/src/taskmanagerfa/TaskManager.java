package taskmanagerfa;

import java.io.*;
import java.sql.*;
import java.awt.HeadlessException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class TaskManager extends javax.swing.JFrame {
    
    private Connection conn;
    private PreparedStatement ps;
    private ResultSet rs;
    
    
    public TaskManager() {
        
        this.model = new DefaultListModel();
        this.model1 = new DefaultListModel();
        initComponents();
        try
        {
        conn = DriverManager.getConnection("jdbc:sqlite:F:\\JD522 FA2\\TaskManagerFA2\\TaskManagerDB");
        //connects to the db and reloads the task manager to load all the database entries.
        Reload();
        }
        catch(SQLException error)
        {
        error.printStackTrace();
        }
    }
    DefaultListModel model;
    DefaultListModel model1;
    
    public void Search(String searchValue){
        String searchQuery1 = "SELECT * FROM Tasks WHERE TaskNames LIKE ? ";

        try {ps = conn.prepareStatement(searchQuery1);
            ps.setString(1, "%"+searchValue +"%");
            rs =ps.executeQuery();
            
            //clear whats in list
            while(model.getSize()>0){
                model.removeAllElements();
            }

            //ADD INFO To List1
            if("Planned".equals(rs.getString("Category"))){
                while(rs.next()){
                    String[]row ={
                        rs.getString("TaskNames"),
                    };
                    //removes the [] so it looks nice
                    String rowAsString = Arrays.toString(row);
                    model.addElement(rowAsString.replace("[", "").replace("]",""));
                }
            }
            rs.close();
            ps.close();
        
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
        
        try {
            ps = conn.prepareStatement(searchQuery1);
            ps.setString(1, "%"+searchValue +"%");
            rs =ps.executeQuery();
            
            //clear whats in list
            while(model1.getSize()>0){
                model1.removeAllElements();
            }

            //ADD INFO To List2
            if("Important".equals(rs.getString("Category"))){
                while(rs.next()){
                    String[]row ={
                        rs.getString("TaskNames"),
                    };
                    //removes the [] so it looks nice
                    String rowAsString = Arrays.toString(row);
                    model1.addElement(rowAsString.replace("[", "").replace("]",""));
                }
            }
            rs.close();
            ps.close();
        
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        searchBtn = new javax.swing.JButton();
        openBtn = new javax.swing.JButton();
        createBtn = new javax.swing.JButton();
        readFromFileBtn = new javax.swing.JButton();
        exportCSV = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        refreshBtn = new javax.swing.JButton();
        saveToFileBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        searchField.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        searchField.setForeground(new java.awt.Color(102, 102, 102));
        searchField.setText("Search Bar");
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Task Manager");

        searchBtn.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.setToolTipText("Search/Refresh");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        openBtn.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        openBtn.setText("Open");
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });

        createBtn.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        createBtn.setText("Create");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        readFromFileBtn.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        readFromFileBtn.setText("Read from File");
        readFromFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readFromFileBtnActionPerformed(evt);
            }
        });

        exportCSV.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        exportCSV.setText("Export CSV");
        exportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCSVActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SimSun", 1, 8)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Jason P 232769");

        refreshBtn.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        saveToFileBtn.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N
        saveToFileBtn.setText("Save to File");
        saveToFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveToFileBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(createBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(readFromFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportCSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(openBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readFromFileBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveToFileBtn)
                .addGap(7, 7, 7)
                .addComponent(exportCSV)
                .addGap(28, 28, 28)
                .addComponent(refreshBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Tasks");

        jLabel4.setFont(new java.awt.Font("SimSun", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Planned");

        jScrollPane1.setFont(new java.awt.Font("SimSun", 1, 12)); // NOI18N

        jList1.setFont(new java.awt.Font("SimSun", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(jList1);

        jLabel5.setFont(new java.awt.Font("SimSun", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Important");

        jList2.setFont(new java.awt.Font("SimSun", 0, 12)); // NOI18N
        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jSeparator3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator4))
                        .addGap(0, 470, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void Reload(){
                //reloads the enitre task manager
        String importantQuery = "SELECT *FROM Tasks WHERE Category = 'Important'";
        String plannedQuery = "SELECT *FROM Tasks WHERE Category = 'Planned'";
            try{
                jList1.setModel(model);
                ps=conn.prepareStatement(plannedQuery);
                rs=ps.executeQuery();

                //clear whats in table
                while(model.getSize()>0){
                    model.removeAllElements();
                }

                //ADD INFO To table
                while(rs.next()){
                    String[]row ={
                        rs.getString("TaskNames"),
                    };
                    String rowAsString = Arrays.toString(row);
                    model.addElement(rowAsString.replace("[", "").replace("]",""));
                }
                rs.close();
                ps.close();

            }catch(Exception ex)
            {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            
            try{
                jList2.setModel(model1);
                ps=conn.prepareStatement(importantQuery);
                rs=ps.executeQuery();

                //clear whats in table
                while(model1.getSize()>0){
                    model1.removeAllElements();
                }

                //ADD INFO To table
                while(rs.next()){
                    String[]row ={
                        rs.getString("TaskNames"),
                    };
                    String rowAsString = Arrays.toString(row);
                    model1.addElement(rowAsString.replace("[", "").replace("]",""));
                }
                rs.close();
                ps.close();

            }catch(Exception ex)
            {
                JOptionPane.showMessageDialog(rootPane, ex);
            }
            
    }

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        //double clicked by accident on this one...
    }//GEN-LAST:event_searchFieldActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        Reload();
            //calls reload to reload everything
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        String searchValue = searchField.getText();
        Search(searchValue);
        //uses search with the searchValue to search for the users entered data.
    }//GEN-LAST:event_searchBtnActionPerformed

    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBtnActionPerformed
        String searchValue = searchField.getText();
        //error handling for when a user enters an invalid Task Name
        try{
            ps = conn.prepareStatement("SELECT 1 FROM Tasks WHERE TaskNames = ?");
            ps.setString(1, searchValue);
            try(ResultSet rs = ps.executeQuery()){
                if(rs.next()){
                    Open open = new Open();
                    open.setVisible(true);
                    open.loadSearch(searchValue);
                    this.dispose();
                }else{
                    JOptionPane.showMessageDialog(rootPane, "Pleas eneter a valid Task Name.");
                }
            }
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(rootPane, ex);
        }
    }//GEN-LAST:event_openBtnActionPerformed

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        Create create = new Create();
        create.setVisible(true);
        this.dispose();
        //opens the Create form
    }//GEN-LAST:event_createBtnActionPerformed

    private void saveToFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileBtnActionPerformed
        String taskQuery = "SELECT * FROM Tasks WHERE TaskNames LIKE ? ";
        String searchValue = searchField.getText();
        try{
            ps = conn.prepareStatement(taskQuery);
            ps.setString(1, "%"+searchValue +"%");
            rs = ps.executeQuery();
            String taskName = rs.getString("TaskNames");
            String taskDetails = rs.getString("TaskDetails");
            String taskCompletionStatus = rs.getString("CompletionStatus");
            String taskCategory = rs.getString("Category");
            rs.close();
            ps.close();
            //fetches the current data in the fields and saves it in a format to the file.
            try{
                String data = taskName+":"+taskDetails+":"+taskCompletionStatus+":"+taskCategory+"\n";
                OutputStream output = new FileOutputStream("F:\\JD522 FA2\\TaskManagerFA2\\output.txt");
                byte[] toSaveList = data.getBytes();
                output.write(toSaveList);
                JOptionPane.showMessageDialog(rootPane,"Task successfully saved to file!");
            }catch(Exception ex){
                JOptionPane.showMessageDialog(rootPane, ex);
            }
                
            
        }catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex);
        }
    }//GEN-LAST:event_saveToFileBtnActionPerformed

    private void readFromFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readFromFileBtnActionPerformed
        Open open = new Open();
        open.setVisible(true);
        open.setTask();
        //setTask in Open.java that fetches the data in the file and uses the format i set it to, to insert it into an Open Form
        this.dispose();
    }//GEN-LAST:event_readFromFileBtnActionPerformed

    private void exportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCSVActionPerformed
        
        String csvOutput = "outputDataBase.csv";
        
        try{
            
            ps = conn.prepareStatement("SELECT * FROM Tasks");
            rs = ps.executeQuery();
            
            FileWriter fw = new FileWriter(csvOutput);
            ResultSetMetaData meta = rs.getMetaData();
            int numClms = meta.getColumnCount();
            String dataHeaders = "";
            
            for(int i = 1; i<= numClms; i++){
                dataHeaders += meta.getCatalogName(i) + ",";
            }
            
            fw.append(dataHeaders.substring(0, dataHeaders.length()- 1) + "\n");
            
            while(rs.next()){
                String rowData = "";
                
                for(int i = 1; i <= numClms; i++){
                    rowData += rs.getString(i) + ",";
                }
                fw.append(rowData.substring(0, rowData.length() - 1) + "\n");
            }
            JOptionPane.showMessageDialog(rootPane, "Database Exported to CSV successfully!");
            
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(rootPane, ex);
            ex.printStackTrace();
        } catch (IOException ex) {
            Logger.getLogger(TaskManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportCSVActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createBtn;
    private javax.swing.JButton exportCSV;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton openBtn;
    private javax.swing.JButton readFromFileBtn;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton saveToFileBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
